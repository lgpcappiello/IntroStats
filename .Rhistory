sett = 1
n1 = n2 = 100
replicate(10, funct(n1, n2, sett, 100))
replicate(10, funct(n1, n2, sett, 1000))
15^2
set.seed(0)
library(onewaytests)
library(car)
library(parallel)
funct1 <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
}
return(data1)
}
boot.samp <- function(n, n1, dev.all){
ids <- sample(1:n, n, replace=TRUE)
samp <- dev.all[ids]
return(median(samp[1:n1]) - median(samp[(n1+1):n]))
}
boot.t <- function(dat, grp, B=100){
n <- length(dat)
# levels (x) where x an object, ex: a factor
grps <- levels(as.factor(grp)) # why do we have to use levels here
dev1 <- abs(dat[grp == grps[1]] - median(dat[grp == grps[1]]))
dev2 <- abs(dat[grp == grps[2]] - median(dat[grp == grps[2]]))
med.dif <- median(dev1) - median(dev2)
dev.all <- c(dev1, dev2)
n1 <- length(grp[grp == grps[1]]) # ifelse(n%%2 == 0, n/2, (n+1)/2)
bootdifs <- replicate(B, boot.samp(n, n1, dev.all))
#replicate(n, expr, simplify ="array")
return(list(orig.med.dif = med.dif, all.boot = bootdifs))
}
# dat : name of the data set
# group : grouping of variable evaluated
# size : number of rows sampled
# k : number of replication
funct <- function (n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*(ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B)
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
replicate(10, funct(n1, n2, sett, 100))
replicate(10, funct(n1, n2, sett, 1000))
replicate(50, funct(n1, n2, sett, 1000))
sett = 1
n1 = n2 = 100
B = 10000
reps = 10000
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B,
funct1, boot.samp, boot.t)
?parSapply
# dat : name of the data set
# group : grouping of variable evaluated
# size : number of rows sampled
# k : number of replication
funct <- function (i, n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*(ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B)
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
# dat : name of the data set
# group : grouping of variable evaluated
# size : number of rows sampled
# k : number of replication
funct <- function (X, n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*(ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B)
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
ett = 1
n1 = n2 = 100
B = 10000
reps = 10000
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B,
funct1, boot.samp, boot.t)
# dat : name of the data set
# group : grouping of variable evaluated
# size : number of rows sampled
# k : number of replication
funct <- function (X, n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
X = X+1
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*(ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B)
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
sett = 1
n1 = n2 = 100
B = 10000
reps = 10000
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B,
funct1, boot.samp, boot.t)
replicate(10, funct(n1, n2, sett, 100))
replicate(10, funct(n1, n2, sett, 100))
sett = 1
n1 = n2 = 100
B = 10000
reps = 10000
replicate(10, funct(n1, n2, sett, 100))
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
library(onewaytests)
library(car)
library(parallel)
funct1 <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
}
return(data1)
}
boot.samp <- function(n, n1, dev.all){
ids <- sample(1:n, n, replace=TRUE)
samp <- dev.all[ids]
return(median(samp[1:n1]) - median(samp[(n1+1):n]))
}
boot.t <- function(dat, grp, B=10000){
n <- length(dat)
# levels (x) where x an object, ex: a factor
grps <- levels(as.factor(grp)) # why do we have to use levels here
dev1 <- abs(dat[grp == grps[1]] - median(dat[grp == grps[1]]))
dev2 <- abs(dat[grp == grps[2]] - median(dat[grp == grps[2]]))
med.dif <- median(dev1) - median(dev2)
dev.all <- c(dev1, dev2)
n1 <- length(grp[grp == grps[1]]) # ifelse(n%%2 == 0, n/2, (n+1)/2)
bootdifs <- replicate(B, boot.samp(n, n1, dev.all))
#replicate(n, expr, simplify ="array")
return(list(orig.med.dif = med.dif, all.boot = bootdifs))
}
# dat : name of the data set
# group : grouping of variable evaluated
# size : number of rows sampled
# k : number of replication
funct <- function (n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*(ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B)
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
sett = 1
n1 = n2 = 100
B = 10000
reps = 10000
replicate(10, funct(n1, n2, sett, 100))
warnings()
stopCluster(cl)
replicate(10, funct(n1, n2, sett, 100))
sett = 1
n1 = n2 = 100
B = 10 # 10000
reps = 10 # 10000
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B, funct1, boot.samp, boot.t)
parSapply(cl, X = 1:reps, FUN = funct, n1 = n1, n2 = n2, setting = sett, B = B, funct1, boot.samp, boot.t)
dat.gen <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
}
return(data1)
}
parSapply(cl, X = 1:reps, FUN = funct, n1 = n1, n2 = n2, setting = sett, B = B, dat.gen, boot.samp, boot.t)
?clusterExport
clusterExport(cl, c=("n1","n2","sett","B","dat.gen","boot.samp","boot.t"))
clusterExport(cl, c("n1","n2","sett","B","dat.gen","boot.samp","boot.t"))
parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B, dat.gen, boot.samp, boot.t)
set.seed(0)
library(onewaytests)
library(car)
library(parallel)
funct1 <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
}else if(setting == 2){
x1 <- rpois(n1, 10)
x2 <- rpois(n2, 15)
}
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
return(data1)
}
boot.samp <- function(n, n1, dev.all){
ids <- sample(1:n, n, replace=TRUE)
samp <- dev.all[ids]
return(median(samp[1:n1]) - median(samp[(n1+1):n]))
}
boot.t <- function(dat, grp, B=100){
n <- length(dat)
# levels (x) where x an object, ex: a factor
# levels returns all of the unique factors, which makes the next part easier
grps <- levels(as.factor(grp))
dev1 <- abs(dat[grp == grps[1]] - median(dat[grp == grps[1]]))
dev2 <- abs(dat[grp == grps[2]] - median(dat[grp == grps[2]]))
med.dif <- median(dev1) - median(dev2)
dev.all <- c(dev1, dev2)
n1 <- length(grp[grp == grps[1]]) # ifelse(n%%2 == 0, n/2, (n+1)/2)
bootdifs <- replicate(B, boot.samp(n, n1, dev.all))
#replicate(n, expr, simplify ="array")
return(list(orig.med.dif = med.dif, all.boot = bootdifs))
}
funct <- function (i, n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
i
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
sett = 1
n1 = n2 = 100
B = 10000
reps = 10000
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
p.vals <- parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B)
end <- Sys.time()
stopCluster(cl)
rm(cl)
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
library(onewaytests)
library(car)
library(parallel)
dat.gen <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
}
return(data1)
}
boot.samp <- function(n, n1, dev.all){
ids <- sample(1:n, n, replace=TRUE)
samp <- dev.all[ids]
return(median(samp[1:n1]) - median(samp[(n1+1):n]))
}
boot.t <- function(dat, grp, B=10000){
n <- length(dat)
# levels (x) where x an object, ex: a factor
grps <- levels(as.factor(grp)) # why do we have to use levels here
dev1 <- abs(dat[grp == grps[1]] - median(dat[grp == grps[1]]))
dev2 <- abs(dat[grp == grps[2]] - median(dat[grp == grps[2]]))
med.dif <- median(dev1) - median(dev2)
dev.all <- c(dev1, dev2)
n1 <- length(grp[grp == grps[1]]) # ifelse(n%%2 == 0, n/2, (n+1)/2)
bootdifs <- replicate(B, boot.samp(n, n1, dev.all))
#replicate(n, expr, simplify ="array")
return(list(orig.med.dif = med.dif, all.boot = bootdifs))
}
# dat : name of the data set
# group : grouping of variable evaluated
# size : number of rows sampled
# k : number of replication
funct <- function (n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
#Data generation
samp.data <- dat.gen(n1,n2,setting)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*(ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B)
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
sett = 1
n1 = n2 = 100
B = 10 # 10000
reps = 10 # 10000
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
# clusterExport(cl, c("n1","n2","sett","B","dat.gen","boot.samp","boot.t"))
strt <- Sys.time()
parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B)
set.seed(0)
library(onewaytests)
library(car)
library(parallel)
funct1 <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
}else if(setting == 2){
x1 <- rpois(n1, 10)
x2 <- rpois(n2, 15)
}
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
return(data1)
}
boot.samp <- function(n, n1, dev.all){
ids <- sample(1:n, n, replace=TRUE)
samp <- dev.all[ids]
return(median(samp[1:n1]) - median(samp[(n1+1):n]))
}
boot.t <- function(dat, grp, B=100){
n <- length(dat)
# levels (x) where x an object, ex: a factor
# levels returns all of the unique factors, which makes the next part easier
grps <- levels(as.factor(grp))
dev1 <- abs(dat[grp == grps[1]] - median(dat[grp == grps[1]]))
dev2 <- abs(dat[grp == grps[2]] - median(dat[grp == grps[2]]))
med.dif <- median(dev1) - median(dev2)
dev.all <- c(dev1, dev2)
n1 <- length(grp[grp == grps[1]]) # ifelse(n%%2 == 0, n/2, (n+1)/2)
bootdifs <- replicate(B, boot.samp(n, n1, dev.all))
#replicate(n, expr, simplify ="array")
return(list(orig.med.dif = med.dif, all.boot = bootdifs))
}
funct <- function (i, n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
i
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
sett = 1
n1 = n2 = 100
B = 10000
reps = 10
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
p.vals <- parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B)
end <- Sys.time()
stopCluster(cl)
rm(cl)
set.seed(0)
library(onewaytests)
library(car)
library(parallel)
funct1 <- function(n1, n2, setting){
if(setting == 1){
x1 <- rnorm(n1, 0, 10)
x2 <- rnorm(n2, 5, 15)
}else if(setting == 2){
x1 <- rpois(n1, 10)
x2 <- rpois(n2, 15)
}
data1 <- data.frame(x = c(x1,x2), groups = c(rep(1,n1),rep(2,n2)))
return(data1)
}
boot.samp <- function(n, n1, dev.all){
ids <- sample(1:n, n, replace=TRUE)
samp <- dev.all[ids]
return(median(samp[1:n1]) - median(samp[(n1+1):n]))
}
boot.t <- function(dat, grp, B=100){
n <- length(dat)
# levels (x) where x an object, ex: a factor
# levels returns all of the unique factors, which makes the next part easier
grps <- levels(as.factor(grp))
dev1 <- abs(dat[grp == grps[1]] - median(dat[grp == grps[1]]))
dev2 <- abs(dat[grp == grps[2]] - median(dat[grp == grps[2]]))
med.dif <- median(dev1) - median(dev2)
dev.all <- c(dev1, dev2)
n1 <- length(grp[grp == grps[1]]) # ifelse(n%%2 == 0, n/2, (n+1)/2)
bootdifs <- replicate(B, boot.samp(n, n1, dev.all))
#replicate(n, expr, simplify ="array")
return(list(orig.med.dif = med.dif, all.boot = bootdifs))
}
funct <- function (i, n1, n2, setting, B){ # x, group, dat, n1, n2, setting, B){
i
#Data generation
samp.data <- funct1(n1,n2,setting) # funct1(size, dat)
#Brown-Forsythe Test
a <- bf.test(samp.data$x ~ as.factor(samp.data$group), data=samp.data, verbose = FALSE)
bf.pval <- a$p.value
#Levene's Test
b <- leveneTest(samp.data$x ~ as.factor(samp.data$group), data=samp.data)
lev.pval <- b$`Pr(>F)`[1]
#Bootstrap
t1 <- boot.t(samp.data$x, samp.data$groups, B)
boot.p.val <- 2*ifelse(t1$orig.med.dif > 0,
sum(t1$all.boot > t1$orig.med.dif),
sum(t1$all.boot < t1$orig.med.dif))/B
#Return output
return(c(bf.pval,lev.pval, boot.p.val))
}
sett = 1
n1 = n2 = 100
B = 10000
reps = 10
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
p.vals <- parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B)
end <- Sys.time()
stopCluster(cl)
rm(cl)
p.vals
sett = 1
n1 = n2 = 100
B = 10000
reps = 100
# parallel computing to speed up run time
ncore <- detectCores()-1
cl <- makeCluster(ncore, type="FORK")
strt <- Sys.time()
p.vals <- parSapply(cl, 1:reps, funct, n1 = n1, n2 = n2, setting = sett, B = B)
end <- Sys.time()
?rbeta
temp <- c(rnorm(100), rnorm(100, 5, 3))
hist(temp)
